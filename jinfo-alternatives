#!/usr/bin/env groovy
/*
 *
 * Add new JVM to the alternatives
 *
 */
import groovy.text.SimpleTemplateEngine

class Alternative {
  String type
  String name
  String path

  String toString(){
    "$name $path"
  }
}

class Command {

  def executeCommand(def alt, def priority){

    def command = getCommand( alt, priority )
    println "Execute: $command"
    def proc = command.execute()
    proc.waitFor()
    if( proc.exitValue() ){
      println proc.err.text
    }
    else {
      def out = proc.text
      if( !out.empty ){
        println out
      }
    }

  }

  def getCommand( Alternative alternative, def priority ){

    def template = 'sudo update-alternatives --install $destination $alias $path $prio'

    def destination = (alternative.type == 'plugin'?"/usr/lib/mozilla/plugins/$alternative.name":"/usr/bin/$alternative.name")
    def binding = [
      "destination":destination,
      "alias": alternative.name,
      "path": alternative.path,
      "prio": priority
    ]

    def engine = new SimpleTemplateEngine()
    def command = engine.createTemplate(template).make(binding)

    command.toString()
  }

}

if ( args.length < 1 ){
  println "give me an jinfo file. you can find some in /usr/lib/jvm on debian based systems"
  System.exit(1)
}

File jinfoFile = new File( args[0] )

def properties = [:]
def alternatives = []

jinfoFile.eachLine { line ->
  if ( line =~ '=' ){
    def propertyPair = line.tokenize('=')
    properties[ propertyPair.getAt(0) ] = propertyPair.getAt(1)
  }
  else if ( line.empty ){
    /* DO NOTHING */
  }
  else {
    def alternativeLine = line.tokenize(' ')
    alternatives << new Alternative(type: alternativeLine[0], name: alternativeLine[1], path: alternativeLine[2])
  }

}

println "Creating alternatives for $properties.name with priority $properties.priority"

alternatives.each{ alt ->
  new Command().executeCommand( alt, properties.priority )
}


